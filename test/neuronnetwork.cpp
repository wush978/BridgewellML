#include <vector>
#include "FTPRL.hpp"
#include "Matrix.hpp"
#include "NeuronNetwork.hpp"

struct CSRMatrix : public FTPRL::Matrix<int, int> {
  
  typedef int ItorType;
  typedef int IndexType;
  
public:
  
  int *i, *p;
  double *x;
  
  CSRMatrix(int nfeature, int ninstance) 
  : FTPRL::Matrix<int, int>(nfeature, ninstance) {
  }
  
  virtual ~CSRMatrix() { }
  
  virtual ItorType getFeatureItorBegin(IndexType instance_id) const {
    return p[instance_id];
  }
  
  virtual ItorType getFeatureItorEnd(IndexType instance_id) const {
    return p[instance_id + 1];
  }
  
  virtual IndexType getFeatureId(ItorType feature_iterator) const {
    return i[feature_iterator];
  }
  
  virtual double getValue(ItorType feature_iterator) const {
    return x[feature_iterator];
  }
    

};  


int main() {
  
  int i[750] = {0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4};
  int p[151] = {0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100,105,110,115,120,125,130,135,140,145,150,155,160,165,170,175,180,185,190,195,200,205,210,215,220,225,230,235,240,245,250,255,260,265,270,275,280,285,290,295,300,305,310,315,320,325,330,335,340,345,350,355,360,365,370,375,380,385,390,395,400,405,410,415,420,425,430,435,440,445,450,455,460,465,470,475,480,485,490,495,500,505,510,515,520,525,530,535,540,545,550,555,560,565,570,575,580,585,590,595,600,605,610,615,620,625,630,635,640,645,650,655,660,665,670,675,680,685,690,695,700,705,710,715,720,725,730,735,740,745,750};
  double x[750] = {1,5.1,3.5,1.4,0.2,1,4.9,3,1.4,0.2,1,4.7,3.2,1.3,0.2,1,4.6,3.1,1.5,0.2,1,5,3.6,1.4,0.2,1,5.4,3.9,1.7,0.4,1,4.6,3.4,1.4,0.3,1,5,3.4,1.5,0.2,1,4.4,2.9,1.4,0.2,1,4.9,3.1,1.5,0.1,1,5.4,3.7,1.5,0.2,1,4.8,3.4,1.6,0.2,1,4.8,3,1.4,0.1,1,4.3,3,1.1,0.1,1,5.8,4,1.2,0.2,1,5.7,4.4,1.5,0.4,1,5.4,3.9,1.3,0.4,1,5.1,3.5,1.4,0.3,1,5.7,3.8,1.7,0.3,1,5.1,3.8,1.5,0.3,1,5.4,3.4,1.7,0.2,1,5.1,3.7,1.5,0.4,1,4.6,3.6,1,0.2,1,5.1,3.3,1.7,0.5,1,4.8,3.4,1.9,0.2,1,5,3,1.6,0.2,1,5,3.4,1.6,0.4,1,5.2,3.5,1.5,0.2,1,5.2,3.4,1.4,0.2,1,4.7,3.2,1.6,0.2,1,4.8,3.1,1.6,0.2,1,5.4,3.4,1.5,0.4,1,5.2,4.1,1.5,0.1,1,5.5,4.2,1.4,0.2,1,4.9,3.1,1.5,0.2,1,5,3.2,1.2,0.2,1,5.5,3.5,1.3,0.2,1,4.9,3.6,1.4,0.1,1,4.4,3,1.3,0.2,1,5.1,3.4,1.5,0.2,1,5,3.5,1.3,0.3,1,4.5,2.3,1.3,0.3,1,4.4,3.2,1.3,0.2,1,5,3.5,1.6,0.6,1,5.1,3.8,1.9,0.4,1,4.8,3,1.4,0.3,1,5.1,3.8,1.6,0.2,1,4.6,3.2,1.4,0.2,1,5.3,3.7,1.5,0.2,1,5,3.3,1.4,0.2,1,7,3.2,4.7,1.4,1,6.4,3.2,4.5,1.5,1,6.9,3.1,4.9,1.5,1,5.5,2.3,4,1.3,1,6.5,2.8,4.6,1.5,1,5.7,2.8,4.5,1.3,1,6.3,3.3,4.7,1.6,1,4.9,2.4,3.3,1,1,6.6,2.9,4.6,1.3,1,5.2,2.7,3.9,1.4,1,5,2,3.5,1,1,5.9,3,4.2,1.5,1,6,2.2,4,1,1,6.1,2.9,4.7,1.4,1,5.6,2.9,3.6,1.3,1,6.7,3.1,4.4,1.4,1,5.6,3,4.5,1.5,1,5.8,2.7,4.1,1,1,6.2,2.2,4.5,1.5,1,5.6,2.5,3.9,1.1,1,5.9,3.2,4.8,1.8,1,6.1,2.8,4,1.3,1,6.3,2.5,4.9,1.5,1,6.1,2.8,4.7,1.2,1,6.4,2.9,4.3,1.3,1,6.6,3,4.4,1.4,1,6.8,2.8,4.8,1.4,1,6.7,3,5,1.7,1,6,2.9,4.5,1.5,1,5.7,2.6,3.5,1,1,5.5,2.4,3.8,1.1,1,5.5,2.4,3.7,1,1,5.8,2.7,3.9,1.2,1,6,2.7,5.1,1.6,1,5.4,3,4.5,1.5,1,6,3.4,4.5,1.6,1,6.7,3.1,4.7,1.5,1,6.3,2.3,4.4,1.3,1,5.6,3,4.1,1.3,1,5.5,2.5,4,1.3,1,5.5,2.6,4.4,1.2,1,6.1,3,4.6,1.4,1,5.8,2.6,4,1.2,1,5,2.3,3.3,1,1,5.6,2.7,4.2,1.3,1,5.7,3,4.2,1.2,1,5.7,2.9,4.2,1.3,1,6.2,2.9,4.3,1.3,1,5.1,2.5,3,1.1,1,5.7,2.8,4.1,1.3,1,6.3,3.3,6,2.5,1,5.8,2.7,5.1,1.9,1,7.1,3,5.9,2.1,1,6.3,2.9,5.6,1.8,1,6.5,3,5.8,2.2,1,7.6,3,6.6,2.1,1,4.9,2.5,4.5,1.7,1,7.3,2.9,6.3,1.8,1,6.7,2.5,5.8,1.8,1,7.2,3.6,6.1,2.5,1,6.5,3.2,5.1,2,1,6.4,2.7,5.3,1.9,1,6.8,3,5.5,2.1,1,5.7,2.5,5,2,1,5.8,2.8,5.1,2.4,1,6.4,3.2,5.3,2.3,1,6.5,3,5.5,1.8,1,7.7,3.8,6.7,2.2,1,7.7,2.6,6.9,2.3,1,6,2.2,5,1.5,1,6.9,3.2,5.7,2.3,1,5.6,2.8,4.9,2,1,7.7,2.8,6.7,2,1,6.3,2.7,4.9,1.8,1,6.7,3.3,5.7,2.1,1,7.2,3.2,6,1.8,1,6.2,2.8,4.8,1.8,1,6.1,3,4.9,1.8,1,6.4,2.8,5.6,2.1,1,7.2,3,5.8,1.6,1,7.4,2.8,6.1,1.9,1,7.9,3.8,6.4,2,1,6.4,2.8,5.6,2.2,1,6.3,2.8,5.1,1.5,1,6.1,2.6,5.6,1.4,1,7.7,3,6.1,2.3,1,6.3,3.4,5.6,2.4,1,6.4,3.1,5.5,1.8,1,6,3,4.8,1.8,1,6.9,3.1,5.4,2.1,1,6.7,3.1,5.6,2.4,1,6.9,3.1,5.1,2.3,1,5.8,2.7,5.1,1.9,1,6.8,3.2,5.9,2.3,1,6.7,3.3,5.7,2.5,1,6.7,3,5.2,2.3,1,6.3,2.5,5,1.9,1,6.5,3,5.2,2,1,6.2,3.4,5.4,2.3,1,5.9,3,5.1,1.8};
  CSRMatrix m(5, 150);
  m.i = i;
  m.p = p;
  m.x = x;
  bool y[150] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

  FTPRL::FTPRL ftprl(0.1, 1, 0.1, 0.1);
  int nnode[3] = {1, 10, 5};
  FTPRL::NeuronNetwork<int> lr(&ftprl, 3, nnode);
  lr.update<int, bool>(&m, y);
  
  std::vector<double> rp(150, 0.0);
  lr.predict<int>(&m, &rp[0]);
  
  return 0;
}

